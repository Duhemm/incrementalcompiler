{
  "types": [
    {
      "name": "ClassfileManagerType",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "types": [
        {
          "name": "DeleteImmediatelyManagerType",
          "namespace": "xsbti.compile",
          "target": "Java",
          "type": "record",
          "doc": "Constructs a minimal ClassfileManager that immediately deletes class files when requested."
        },
        {
          "name": "TransactionalMangerType",
          "namespace": "xsbti.compile",
          "target": "Java",
          "type": "record",
          "fields": [
            {
              "name": "backupDirectory",
              "type": "java.io.File"
            },
            {
              "name": "logger",
              "type": "xsbti.Logger"
            }
          ]
        }

      ]
    },
    {
      "name": "IncOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": [
        "Represents all configuration options for the incremental compiler itself and",
        "not the underlying Java/Scala compiler."
      ],
      "fields": [
        {
          "name": "transitiveStep",
          "type": "int",
          "doc": "After which step include whole transitive closure of invalidated source files."
        },
        {
          "name": "recompileAllFraction",
          "type": "double",
          "doc": [
            "What's the fraction of invalidated source files when we switch to recompiling",
            "all files and giving up incremental compilation altogether. That's useful in",
            "cases when probability that we end up recompiling most of source files but",
            "in multiple steps is high. Multi-step incremental recompilation is slower",
            "than recompiling everything in one step."
          ]
        },
        {
          "name": "relationsDebug",
          "type": "boolean",
          "doc": "Print very detailed information about relations, such as dependencies between source files."
        },
        {
          "name": "apiDebug",
          "type": "boolean",
          "doc": [
            "Enable tools for debugging API changes."
          ]
        },
        {
          "name": "apiDiffContextSize",
          "type": "int",
          "doc": [
            "Controls context size (in lines) displayed when diffs are produced for textual API",
            "representation.",
            "",
            "This option is used only when `apiDebug == true`."
          ]
        },
        {
          "name": "apiDumpDirectory",
          "type": "xsbti.Maybe<java.io.File>",
          "doc": [
            "The directory where we dump textual representation of APIs. This method might be called",
            "only if apiDebug returns true. This is unused option at the moment as the needed functionality",
            "is not implemented yet."
          ]
        },
        {
          "name": "classfileManagerType",
          "type": "xsbti.Maybe<ClassfileManagerType>",
          "doc": "ClassfileManager that will handle class file deletion and addition during a single incremental compilation run."
        },
        {
          "name": "recompileOnMacroDef",
          "type": "xsbti.Maybe<Boolean>",
          "doc": [
            "Determines whether incremental compiler should recompile all dependencies of a file",
            "that contains a macro definition."
          ]
        },
        {
          "name": "nameHashing",
          "type": "boolean",
          "doc": [
            "Determines whether incremental compiler uses the new algorithm known as name hashing."
          ]
        },
        {
          "name": "antStyle",
          "type": "boolean",
          "doc": [
            "THE `antStyle` OPTION IS UNSUPPORTED, MAY GO AWAY AT ANY POINT.",
            "",
            "Enables \"ant-style\" mode of incremental compilation. This mode emulates what Ant's scalac command does.",
            "The idea is to recompile just changed source files and not perform any invalidation of dependencies. This",
            "is a very naive mode of incremental compilation that very often leads to broken binaries.",
            "",
            "The Ant-style mode has been introduced because Scala team might need it for migration of Scala compiler to sbt.",
            "It was added as a defensive measure so that the SBT build would be at least no worse than Ant wrt",
            "recompilation. When working on changes that are pathological for the normal inc compiler mode, one ",
            "could switch in to this mode and use our old tricks of touching files we know need recompilation.",
            "",
            "The name hashing algorithm doesn't work well with Scala compiler sources due to deep inheritance chains.",
            "There's a plan to refactor compiler's code to use more composition instead of inheritance.",
            "",
            "Once Scala compiler sources are refactored to work well with name hashing algorithm this option will be",
            "deleted immediately.",
            "See also https://github.com/sbt/incrementalcompiler/issues/22"
          ]
        },
        {
          "name": "extra",
          "type": "java.util.Map<String,String>",
          "doc": "Extra options"
        }
      ]
    },
    {
      "name": "CompileSetup",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "fields": [
        {
          "name": "output",
          "type": "xsbti.compile.Output"
        },
        {
          "name": "scalacOptions",
          "type": "String*"
        },
        {
          "name": "javacOptions",
          "type": "String*"
        },
        {
          "name": "scalaVersion",
          "type": "String"
        },
        {
          "name": "order",
          "type": "xsbti.compile.CompileOrder"
        },
        {
          "name": "nameHashing",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "Inputs",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "doc": "Configures a single compilation of a single set of sources.",
      "fields": [
        {
          "name": "compilers",
          "type": "Compilers",
          "doc": "The Scala and Java compilers to use for compilation."
        },
        {
          "name": "options",
          "type": "Options",
          "doc": "Standard compilation options, such as the sources and classpath to use."
        },
        {
          "name": "setup",
          "type": "Setup",
          "doc": "Configures incremental compilation."
        }
      ],
      "methods": [
        {
          "name": "toCompileSetup",
          "type": "CompileSetup",
          "doc": "A summary of the compilation setup."
        }
      ]
    },
    {
      "name": "Analysis",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "doc": [
        "Information about compiler runs accumulated since `clean` command has been run.",
        "",
        "The main use-case for using `compilations` field is to determine how",
        "many iterations it took to compilen give code. The `Compilation` object",
        "are also stored in `Source` objects so there's an indirect way to recover",
        "information about files being recompiled in every iteration.",
        "",
        "The incremental compilation algorithm doesn't use information stored in",
        "`compilations`. It's safe to prune contents of that field without breaking",
        "internal consistency of the entire Analysis object."
      ],
      "fields": [
        {
          "name": "stamps",
          "type": "Stamps"
        },
        {
          "name": "apis",
          "type": "APIs"
        },
        {
          "name": "relations",
          "doc": "Mappings between sources, classes, and binaries.",
          "type": "Relations"
        },
        {
          "name": "infos",
          "type": "SourceInfos"
        },
        {
          "name": "compilations",
          "doc": [
            "Information about compiler runs accumulated since `clean` command has been run.",
             "",
             "The main use-case for using `compilations` field is to determine how",
             "many iterations it took to compilen give code. The `Compilation` object",
             "are also stored in `Source` objects so there's an indirect way to recover",
             "information about files being recompiled in every iteration.",
             "",
             "The incremental compilation algorithm doesn't use information stored in",
             "`compilations`. It's safe to prune contents of that field without breaking",
             "internal consistency of the entire Analysis object."
          ],
          "type": "Compilations"
        }
      ],
      "methods": [
        {
          "name": "plus",
          "doc": "Concatenates Analysis objects naively, i.e., doesn't internalize external deps on added files. See `Analysis.merge`.",
          "type": "Analysis",
          "args": [
            {
              "name": "other",
              "type": "Analysis"
            }
          ]
        },
        {
          "name": "minus",
          "doc": "Drops all analysis information for `sources` naively, i.e., doesn't externalize internal deps on removed files.",
          "type": "Analysis",
          "args": [
            {
              "name": "other",
              "type": "Analysis"
            }
          ]
        },
        {
          "name": "addSource",
          "type": "Analysis",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            },
            {
              "name": "api",
              "type": "xsbti.api.Source"
            },
            {
              "name": "info",
              "type": "xsbti.compile.SourceInfo"
            },
            {
              "name": "products",
              "type": "xsbti.api.Product*"
            },
            {
              "name": "internalDeps",
              "type": "xsbti.api.InternalDependency*"
            },
            {
              "name": "externalDeps",
              "type": "xsbti.api.ExternalDependency*"
            },
            {
              "name": "binaryDeps",
              "type": "xsbti.api.BinaryDependency*"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadStamps",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "methods": [
        {
          "name": "product",
          "doc": "The Stamp for the given product at the time represented by this Stamps instance.",
          "type": "xsbti.api.Stamp",
          "args": [
            {
              "name": "prod",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "internalSource",
          "doc": "The Stamp for the given source file at the time represented by this Stamps instance.",
          "type": "xsbti.api.Stamp",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "binary",
          "doc": "The Stamp for the given binary dependency at the time represented by this Stamps instance.",
          "type": "xsbti.api.Stamp",
          "args": [
            {
              "name": "bin",
              "type": "java.io.File"
            }
          ]
        }
      ],
      "types": [
        {
          "name": "Stamps",
          "namespace": "xsbti.compile",
          "target": "Java",
          "type": "protocol",
          "doc": "Provides information about files as they were at a specific time.",
          "methods": [
            {
              "name": "allInternalSources",
              "type": "java.util.Set<java.io.File>"
            },
            {
              "name": "allBinaries",
              "type": "java.util.Set<java.io.File>"
            },
            {
              "name": "allProducts",
              "type": "java.util.Set<java.io.File>"
            },
            {
              "name": "sources",
              "type": "java.util.Map<java.io.File, xsbti.api.Stamp>"
            },
            {
              "name": "binaries",
              "type": "java.util.Map<java.io.File, xsbti.api.Stamp>"
            },
            {
              "name": "products",
              "type": "java.util.Map<java.io.File, xsbti.api.Stamp>"
            },
            {
              "name": "classNames",
              "type": "java.util.Map<java.io.File, String>"
            },
            {
              "name": "className",
              "type": "xsbti.Maybe<String>",
              "args": [
                {
                  "name": "bin",
                  "type": "java.io.File"
                }
              ]
            },
            {
              "name": "markInternalSource",
              "type": "Stamps",
              "args": [
                {
                  "name": "src",
                  "type": "java.io.File"
                },
                {
                  "name": "s",
                  "type": "xsbti.api.Stamp"
                }
              ]
            },
            {
              "name": "markBinary",
              "type": "Stamps",
              "args": [
                {
                  "name": "bin",
                  "type": "java.io.File"
                },
                {
                  "name": "className",
                  "type": "String"
                },
                {
                  "name": "s",
                  "type": "xsbti.api.Stamp"
                }
              ]
            },
            {
              "name": "markProduct",
              "type": "Stamps",
              "args": [
                {
                  "name": "prod",
                  "type": "java.io.File"
                },
                {
                  "name": "s",
                  "type": "xsbti.api.Stamp"
                }
              ]
            },
            {
              "name": "plus",
              "type": "Stamps",
              "args": [
                {
                  "name": "o",
                  "type": "Stamps"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "APIs",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "fields": [
        {
          "name": "internal",
          "type": "java.util.Map<java.io.File, xsbti.api.Source>"
        },
        {
          "name": "external",
          "type": "java.util.Map<String, xsbti.api.Source>"
        }
      ],
      "methods": [
        {
          "name": "internalAPI",
          "doc": [
            "The API for the source file `src` at the time represented by this instance.",
            "This method returns an empty API if the file had no API or is not known to this instance."
          ],
          "type": "xsbti.api.Source",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "externalAPI",
          "doc": [
            "The API for the external class `ext` at the time represented by this instance.",
            "This method returns an empty API if the file had no API or is not known to this instance."
          ],
          "type": "xsbti.api.Source",
          "args": [
            {
              "name": "ext",
              "type": "String"
            }
          ]
        },
        {
          "name": "allExternals",
          "type": "java.util.Set<String>"
        },
        {
          "name": "allInternalSources",
          "type": "java.util.Set<java.io.File>"
        },
        {
          "name": "plus",
          "type": "APIs",
          "args": [
            {
              "name": "o",
              "type": "APIs"
            }
          ]
        },
        {
          "name": "markInternalSource",
          "type": "APIs",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            },
            {
              "name": "api",
              "type": "xsbti.api.Source"
            }
          ]
        },
        {
          "name": "markExternalAPI",
          "type": "APIs",
          "args": [
            {
              "name": "ext",
              "type": "String"
            },
            {
              "name": "api",
              "type": "xsbti.api.Source"
            }
          ]
        },
        {
          "name": "removeInternal",
          "type": "APIs",
          "args": [
            {
              "name": "remove",
              "type": "Iterable<java.io.File>"
            }
          ]
        }
      ]
    },
    {
      "name": "Relations",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "doc": [
        "Provides mappings between source files, generated classes (products), and binaries.",
        "Dependencies that are tracked include internal: a dependency on a source in the same compilation group (project),",
        "external: a dependency on a source in another compilation group (tracked as the name of the class),",
        "binary: a dependency on a class or jar file not generated by a source file in any tracked compilation group,",
        "inherited: a dependency that resulted from a public template inheriting,",
        "direct: any type of dependency, including inheritance."
      ],
      "methods": [
        {
          "name": "allSources",
          "doc": "All sources _with at least one product_ .",
          "type": "java.util.Set<java.io.File>"
        },
        {
          "name": "allProducts",
          "doc": "All products associated with sources.",
          "type": "java.util.Set<java.io.File>"
        },
        {
          "name": "allBinaryDeps",
          "doc": "All files that are recorded as a binary dependency of a source file.",
          "type": "java.util.Set<java.io.File>"
        },
        {
          "name": "allInternalSrcDeps",
          "doc": "All files in this compilation group (project) that are recorded as a source dependency of a source file in this group.",
          "type": "java.util.Set<java.io.File>"
        },
        {
          "name": "allExternalDeps",
          "doc": "All files in another compilation group (project) that are recorded as a source dependency of a source file in this group.",
          "type": "java.util.Set<String>"
        },
        {
          "name": "classNames",
          "doc": "Fully qualified names of classes generated from source file `src`.",
          "type": "java.util.Set<String>",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "definesClass",
          "doc": "Source files that generated a class with the given fully qualified `name`. This is typically a set containing a single file.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "name",
              "type": "String"
            }
          ]
        },
        {
          "name": "products",
          "doc": "The classes that were generated for source file `src`.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "produced",
          "doc": "The source files that generated class file `prod`.  This is typically a set containing a single file.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "prod",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "binaryDeps",
          "doc": "The binary dependencies for the source file `src`.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "usesBinary",
          "doc": "The source files that depend on binary file `dep`.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "dep",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "internalSrcDeps",
          "doc": "Internal source dependencies for `src`.  This includes both direct and inherited dependencies.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "usesInternalSrc",
          "doc": "Internal source files that depend on internal source `dep`.  This includes both direct and inherited dependencies.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "dep",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "externalDeps",
          "doc": "External source dependencies that internal source file `src` depends on.  This includes both direct and inherited dependencies.",
          "type": "java.util.Set<String>",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "usesExternal",
          "doc": "Internal source dependencies that depend on external source file `dep`.  This includes both direct and inherited dependencies.",
          "type": "java.util.Set<java.io.File>",
          "args": [
            {
              "name": "dep",
              "type": "String"
            }
          ]
        },
        {
          "name": "addSource",
          "doc": [
            "Records that the file `src` generates products `products`, has internal dependencies `internalDeps`,",
            "has external dependencies `externalDeps` and binary dependencies `binaryDeps`."
          ],
          "type": "Relations",
          "args": [
            {
              "name": "src",
              "type": "java.io.File"
            },
            {
              "name": "products",
              "type": "xsbti.api.Product*"
            },
            {
              "name": "internalDeps",
              "type": "xsbti.api.InternalDependency*"
            },
            {
              "name": "externalDeps",
              "type": "xsbti.api.ExternalDependency*"
            },
            {
              "name": "binaryDeps",
              "type": "xsbti.api.BinaryDependency*"
            }
          ]
        },
        {
          "name": "plus",
          "doc": "Concatenates the two relations. Acts naively, i.e., doesn't internalize external deps on added files.",
          "type": "Relations",
          "args": [
            {
              "name": "o",
              "type": "Relations"
            }
          ]
        },
        {
          "name": "minus",
          "doc": "Drops all dependency mappings a->b where a is in `sources`. Acts naively, i.e., doesn't externalize internal deps on removed files.",
          "type": "Relations",
          "args": [
            {
              "name": "sources",
              "type": "java.io.File*"
            }
          ]
        },
        {
          "name": "srcProd",
          "doc": "The relation between internal sources and generated class files.",
          "type": "sbt.internal.util.Relation<java.io.File, java.io.File>"
        },
        {
          "name": "binaryDep",
          "doc": "The dependency relation between internal sources and binaries.",
          "type": "sbt.internal.util.Relation<java.io.File, java.io.File>"
        },
        {
          "name": "internalSrcDep",
          "doc": "The dependency relation between internal sources.  This includes both direct and inherited dependencies.",
          "type": "sbt.internal.util.Relation<java.io.File, java.io.File>"
        },
        {
          "name": "externalDep",
          "doc": "The dependency relation between internal and external sources.  This includes both direct and inherited dependencies.",
          "type": "sbt.internal.util.Relation<java.io.File, String>"
        },
        {
          "name": "classes",
          "doc": "The relation between a source file and the fully qualified names of classes generated from it.",
          "type": "sbt.internal.util.Relation<java.io.File, String>"
        }
      ]
    },
    {
      "name": "SourceInfo",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "fields": [
        {
          "name": "reportedProblems",
          "type": "xsbti.Problem*"
        },
        {
          "name": "unreportedProblems",
          "type": "xsbti.Problem*"
        }
      ]
    },
    {
      "name": "SourceInfos",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "methods": [
        {
          "name": "plus",
          "type": "SourceInfos",
          "args": [
            {
              "name": "o",
              "type": "SourceInfos"
            }
          ]
        },
        {
          "name": "add",
          "type": "SourceInfos",
          "args": [
            {
              "name": "file",
              "type": "java.io.File"
            },
            {
              "name": "info",
              "type": "SourceInfo"
            }
          ]
        },
        {
          "name": "minus",
          "type": "SourceInfos",
          "args": [
            {
              "name": "files",
              "type": "java.io.File*"
            }
          ]
        },
        {
          "name": "get",
          "type": "SourceInfo",
          "args": [
            {
              "name": "file",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "allInfos",
          "type": "java.util.Map<java.io.File, SourceInfo>"
        }
      ]
    },
    {
      "name": "Compilations",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "protocol",
      "doc": "Information about compiler runs accumulated since `clean` command has been run.",
      "fields": [
        {
          "name": "allCompilations",
          "type": "xsbti.api.Compilation*"
        }
      ],
      "methods": [
        {
          "name": "plus",
          "type": "Compilations",
          "args": [
            {
              "name": "o",
              "type": "Compilations"
            }
          ]
        },
        {
          "name": "add",
          "type": "Compilations",
          "args": [
            {
              "name": "c",
              "type": "xsbti.api.Compilation"
            }
          ]
        }
      ]
    }
  ]
}

















